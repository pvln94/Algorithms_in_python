def hamiltonian_circuit(graph):
    n = len(graph)
    path = [-1] * n

    def is_valid(v, pos):
        # Check if vertex v can be added to path at position pos
        if graph[path[pos - 1]][v] == 0:
            return False
        if v in path:
            return False
        return True

    def hamiltonian_circuit_util(pos):
        # Base case: if all vertices are included in the path
        if pos == n:
            # And if there is an edge from the last included vertex to the first vertex
            if graph[path[pos - 1]][path[0]] == 1:
                return True
            else:
                return False

        # Try different vertices as the next candidate in the Hamiltonian Cycle
        for v in range(1, n):
            if is_valid(v, pos):
                path[pos] = v

                if hamiltonian_circuit_util(pos + 1):
                    return True

                # Remove the vertex if it doesn't lead to a solution
                path[pos] = -1

        return False

    # Start from vertex 0 as the initial vertex in the path
    path[0] = 0

    if not hamiltonian_circuit_util(1):
        print("No Hamiltonian Circuit exists")
    else:
        print("Hamiltonian Circuit found:", path + [path[0]])

# Example usage:
graph = [
    [0, 1, 1, 1],
    [1, 0, 1, 1],
    [1, 1, 0, 0],
    [1, 1, 0, 0]
]

hamiltonian_circuit(graph)




Output:
Hamiltonian Circuit found: [0, 2, 1, 3, 0]

0 - a
1 - b
2 - c
3 - d
